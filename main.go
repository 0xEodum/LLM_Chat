package main

import (
	"bufio"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"strings"
	"time"

	"github.com/google/generative-ai-go/genai"
	"github.com/google/jsonschema-go/jsonschema"
	"github.com/modelcontextprotocol/go-sdk/mcp"
	"google.golang.org/api/option"
)

//
// ===============================
// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JSON Schema ‚Üí genai
// ===============================
//

func schemaTypeToGenai(t string) genai.Type {
	switch strings.ToLower(strings.TrimSpace(t)) {
	case "string":
		return genai.TypeString
	case "number":
		return genai.TypeNumber
	case "integer":
		return genai.TypeInteger
	case "boolean":
		return genai.TypeBoolean
	case "array":
		return genai.TypeArray
	case "object":
		return genai.TypeObject
	case "null":
		return genai.TypeString
	default:
		return genai.TypeString
	}
}

// —É—Ç–∏–ª–∏—Ç–∞: –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ description/title
func firstNonEmpty(ss ...string) string {
	for _, s := range ss {
		if strings.TrimSpace(s) != "" {
			return s
		}
	}
	return ""
}

// –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å enum –∫ []string (Gemini –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç string-—ç–Ω—É–º—ã)
func toStringEnum(vals []any) []string {
	if len(vals) == 0 {
		return nil
	}
	out := make([]string, 0, len(vals))
	for _, v := range vals {
		if s, ok := v.(string); ok {
			out = append(out, s)
		}
	}
	if len(out) == 0 {
		return nil
	}
	return out
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ jsonschema ‚Üí *genai.Schema (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
func convertProperty(s *jsonschema.Schema) *genai.Schema {
	// –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
	if s == nil {
		return &genai.Schema{Type: genai.TypeString}
	}

	// anyOf: –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥-—Å—Ö–µ–º—É, —á–µ–π —Ç–∏–ø –Ω–µ —Ä–∞–≤–µ–Ω "null"
	if len(s.AnyOf) > 0 {
		for _, sub := range s.AnyOf {
			if sub == nil {
				continue
			}
			// —Ç–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ Type –∏–ª–∏ –≤ Types
			t := strings.ToLower(strings.TrimSpace(sub.Type))
			if t == "" && len(sub.Types) > 0 {
				t = strings.ToLower(strings.TrimSpace(sub.Types[0]))
			}
			if t != "null" {
				return convertProperty(sub)
			}
		}
		// fallback
		return &genai.Schema{Type: genai.TypeString}
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø: –ª–∏–±–æ Type, –ª–∏–±–æ –ø–µ—Ä–≤—ã–π –∏–∑ Types
	propType := s.Type
	if propType == "" && len(s.Types) > 0 {
		propType = s.Types[0]
	}
	gType := schemaTypeToGenai(propType)
	desc := firstNonEmpty(s.Description, s.Title)
	enumVals := toStringEnum(s.Enum)

	switch gType {
	case genai.TypeArray:
		// –í go-sdk jsonschema.Schema –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç Items *Schema (draft 2020-12)
		var itemSchema *jsonschema.Schema
		if s.Items != nil {
			itemSchema = s.Items
		}
		return &genai.Schema{
			Type:        genai.TypeArray,
			Items:       convertProperty(itemSchema),
			Description: desc,
			Enum:        enumVals, // –æ–±—ã—á–Ω–æ enum –Ω–∞ –º–∞—Å—Å–∏–≤–∞—Ö –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç, –Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç
		}

	case genai.TypeObject:
		props := map[string]*genai.Schema{}
		if s.Properties != nil {
			for name, sub := range s.Properties {
				props[name] = convertProperty(sub)
			}
		}
		var required []string
		if len(s.Required) > 0 {
			required = append(required, s.Required...)
		}
		return &genai.Schema{
			Type:        genai.TypeObject,
			Properties:  props,
			Required:    required,
			Description: desc,
			Enum:        enumVals,
		}

	default:
		// –ø—Ä–∏–º–∏—Ç–∏–≤—ã
		return &genai.Schema{
			Type:        gType,
			Description: desc,
			Enum:        enumVals,
		}
	}
}

// MCP tools ‚Üí Gemini FunctionDeclaration
func convertMCPToGeminiTools(tools []*mcp.Tool) []*genai.FunctionDeclaration {
	out := make([]*genai.FunctionDeclaration, 0, len(tools))
	for _, t := range tools {
		// –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π OBJECT
		var root jsonschema.Schema
		if t.InputSchema != nil {
			root = *t.InputSchema
		}
		if root.Type == "" && len(root.Types) == 0 {
			root.Type = "object"
		}

		// —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞
		var params *genai.Schema
		if strings.EqualFold(root.Type, "object") || (len(root.Types) > 0 && strings.EqualFold(root.Types[0], "object")) {
			props := map[string]*genai.Schema{}
			if root.Properties != nil {
				for name, sub := range root.Properties {
					props[name] = convertProperty(sub)
				}
			}
			params = &genai.Schema{
				Type:        genai.TypeObject,
				Properties:  props,
				Required:    append([]string(nil), root.Required...),
				Description: firstNonEmpty(root.Description, root.Title),
			}
		} else {
			// –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–æ—Ä–µ–Ω—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π
			params = &genai.Schema{
				Type:        genai.TypeObject,
				Description: firstNonEmpty(root.Description, root.Title),
			}
		}

		desc := t.Description
		if desc == "" && t.Annotations != nil {
			desc = t.Annotations.Title
		}

		fd := &genai.FunctionDeclaration{
			Name:        t.Name,
			Description: desc,
			Parameters:  params,
		}
		out = append(out, fd)
	}
	return out
}

//
// ==================
// MCP –∫–ª–∏–µ–Ω—Ç (Go)
// ==================
//

type MCPClientConfig struct {
	ServerPath       string
	ServerEnv        map[string]string
	PythonPath       string
	GeminiAPIKey     string
	GeminiBaseURL    string
	GeminiModel      string
	ServerURL        string
	HTTPHeaders      map[string]string
	SystemPromptPath string
}

func defaultConfig() MCPClientConfig {
	return MCPClientConfig{
		ServerURL:   envOr("MCP_SERVER_URL", "http://localhost:8000/mcp"),
		HTTPHeaders: nil,

		GeminiAPIKey:  envOr("GEMINI_API_KEY", "sk-..."),
		GeminiBaseURL: envOr("GEMINI_BASE_URL", "https://api.proxyapi.ru/google"),
		GeminiModel:   envOr("GEMINI_MODEL", "gemini-2.5-flash"),

		// –ø—É—Ç—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
		SystemPromptPath: envOr("SYSTEM_PROMPT_PATH", "system_prompt.txt"),

		// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è stdio-—Ä–µ–∂–∏–º–∞ –∫–∞–∫ fallback:
		ServerPath: "mcp_server.py",
		PythonPath: envOr("PYTHON", "python3"),
		ServerEnv:  nil,
	}
}

type MCPClient struct {
	cfg           MCPClientConfig
	mcpClient     *mcp.Client
	session       *mcp.ClientSession
	genClient     *genai.Client
	model         *genai.GenerativeModel
	chat          *genai.ChatSession
	available     []*mcp.Tool
	geminiTools   []*genai.FunctionDeclaration
	connectedProc *exec.Cmd
	systemPrompt  string // –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
}

func NewMCPClient(cfg MCPClientConfig) *MCPClient {
	return &MCPClient{cfg: cfg}
}

type headerRoundTripper struct {
	next    http.RoundTripper
	headers map[string]string
}

func (h *headerRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
	for k, v := range h.headers {
		if req.Header.Get(k) == "" {
			req.Header.Set(k, v)
		}
	}
	return h.next.RoundTrip(req)
}

func httpClientWithHeaders(headers map[string]string) *http.Client {
	if len(headers) == 0 {
		return nil // ok: go-sdk –≤–æ–∑—å–º—ë—Ç http.DefaultClient
	}
	rt := http.DefaultTransport
	return &http.Client{Transport: &headerRoundTripper{next: rt, headers: headers}}
}

// loadSystemPrompt –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
func (c *MCPClient) loadSystemPrompt() error {
	if c.cfg.SystemPromptPath == "" {
		return errors.New("–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(c.cfg.SystemPromptPath); os.IsNotExist(err) {
		// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
		log.Printf("üìù –§–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω %s", c.cfg.SystemPromptPath)
		return nil
	}

	file, err := os.Open(c.cfg.SystemPromptPath)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ '%s': %w", c.cfg.SystemPromptPath, err)
	}
	defer file.Close()

	content, err := io.ReadAll(file)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ '%s': %w", c.cfg.SystemPromptPath, err)
	}

	c.systemPrompt = strings.TrimSpace(string(content))
	if c.systemPrompt == "" {
		return fmt.Errorf("—Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ '%s' –ø—É—Å—Ç", c.cfg.SystemPromptPath)
	}

	log.Printf("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞: %s (%d —Å–∏–º–≤–æ–ª–æ–≤)", c.cfg.SystemPromptPath, len(c.systemPrompt))
	return nil
}

func (c *MCPClient) Start(ctx context.Context) error {
	log.Println("üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
	if err := c.loadSystemPrompt(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: %w", err)
	}

	log.Println("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP –ø–æ Streamable HTTP‚Ä¶")

	// 1) –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: streamable HTTP
	transport := &mcp.StreamableClientTransport{
		Endpoint:   strings.TrimRight(c.cfg.ServerURL, "/"),
		HTTPClient: httpClientWithHeaders(c.cfg.HTTPHeaders),
		// MaxRetries: 5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ
	}

	// 2) –ö–ª–∏–µ–Ω—Ç + —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	impl := &mcp.Implementation{Name: "go-mcp-client", Version: "0.2.0"}
	client := mcp.NewClient(impl, &mcp.ClientOptions{})

	session, err := client.Connect(ctx, transport, nil)
	if err != nil {
		return fmt.Errorf("connect MCP (streamable-http): %w", err)
	}
	c.mcpClient = client
	c.session = session

	// 3) –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	log.Println("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤‚Ä¶")
	ltr, err := c.session.ListTools(ctx, &mcp.ListToolsParams{})
	if err != nil {
		c.Stop()
		return fmt.Errorf("list tools: %w", err)
	}
	c.available = ltr.Tools
	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ %d –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n", len(c.available))
	for _, t := range c.available {
		log.Printf("  - %s: %s", t.Name, t.Description)
	}

	// 4) –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini ‚Äî –∫–∞–∫ –±—ã–ª–æ
	log.Println("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è Gemini‚Ä¶")
	c.geminiTools = convertMCPToGeminiTools(c.available)

	log.Println("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini –∫–ª–∏–µ–Ω—Ç–∞‚Ä¶")
	opts := []option.ClientOption{option.WithAPIKey(c.cfg.GeminiAPIKey)}
	if strings.TrimSpace(c.cfg.GeminiBaseURL) != "" {
		opts = append(opts, option.WithEndpoint(strings.TrimRight(c.cfg.GeminiBaseURL, "/")))
	}
	genClient, err := genai.NewClient(ctx, opts...)
	if err != nil {
		c.Stop()
		return fmt.Errorf("genai client: %w", err)
	}
	c.genClient = genClient
	c.model = c.genClient.GenerativeModel(c.cfg.GeminiModel)
	c.model.Tools = []*genai.Tool{{FunctionDeclarations: c.geminiTools}}
	c.chat = c.model.StartChat()

	log.Println("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")
	return nil
}

func (c *MCPClient) Stop() {
	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
	if c.session != nil {
		_ = c.session.Close() // –æ—Ç–ø—Ä–∞–≤–∏—Ç DELETE –Ω–∞ /mcp —Å session-id
	}
	if c.genClient != nil {
		_ = c.genClient.Close()
	}
}

func (c *MCPClient) callMCPTool(ctx context.Context, name string, args map[string]any) (map[string]any, error) {
	log.Printf("üîß –í—ã–∑–æ–≤ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: %s\n", name)
	if args == nil {
		args = map[string]any{}
	}
	res, err := c.session.CallTool(ctx, &mcp.CallToolParams{
		Name:      name,
		Arguments: args,
	})
	if err != nil {
		return nil, fmt.Errorf("tools/call: %w", err)
	}
	if res.IsError {
		// –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
		msg := "tool error"
		for _, ct := range res.Content {
			if tc, ok := ct.(*mcp.TextContent); ok && strings.TrimSpace(tc.Text) != "" {
				msg = tc.Text
				break
			}
		}
		return map[string]any{"error": msg}, nil
	}

	// –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª structuredContent ‚Äî –æ—Ç–ª–∏—á–Ω–æ
	if res.StructuredContent != nil {
		// –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º map[string]any (–µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π output)
		switch v := res.StructuredContent.(type) {
		case map[string]any:
			return v, nil
		default:
			// –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JSON –º–∞—Ä—à–∞–ª/–∞–Ω–º–∞—Ä—à–∞–ª –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ–±—ä–µ–∫—Ç—É
			b, _ := json.Marshal(v)
			m := map[string]any{}
			if err := json.Unmarshal(b, &m); err == nil {
				return m, nil
			}
			// –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Äî –∑–∞–≤–µ—Ä–Ω—ë–º –∫–∞–∫ result:string
			return map[string]any{"result": string(b)}, nil
		}
	}

	// –ò–Ω–∞—á–µ —Å–∫–ª–µ–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
	var sb strings.Builder
	for _, ct := range res.Content {
		if tc, ok := ct.(*mcp.TextContent); ok {
			sb.WriteString(tc.Text)
			sb.WriteString("\n")
		}
	}
	out := strings.TrimSpace(sb.String())
	if out != "" {
		return map[string]any{"result": out}, nil
	}
	// –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç—ã—à–∫—É
	return map[string]any{"result": nil}, nil
}

// –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–∞–Ω–∞–ª–æ–≥ Python process_query)
func (c *MCPClient) ProcessQuery(ctx context.Context, userQuery string, maxIterations int) (string, error) {
	log.Printf("\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %s\n", userQuery)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
	if c.systemPrompt == "" {
		return "", errors.New("—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
	}

	// –ü–µ—Ä–≤—ã–π —Ö–æ–¥: –∫–ª–∞–¥—ë–º –≤–µ—Å—å system + –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –≤ Python)
	firstTurn := genai.Text(c.systemPrompt + "\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userQuery)

	var lastTextAnswer string

	for i := 0; i < maxIterations; i++ {
		log.Printf("\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è %d/%d\n", i+1, maxIterations)

		var resp *genai.GenerateContentResponse
		var err error
		if i == 0 {
			resp, err = c.chat.SendMessage(ctx, firstTurn)
		} else {
			// –ü—É—Å—Ç–æ–π '—Ç–æ–ª—á–æ–∫' –ø–æ—Å–ª–µ FunctionResponse ‚Äî –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é
			resp, err = c.chat.SendMessage(ctx, genai.Text(""))
		}
		if err != nil {
			return "", fmt.Errorf("gemini generate: %w", err)
		}
		if resp == nil || len(resp.Candidates) == 0 || resp.Candidates[0].Content == nil {
			return "", errors.New("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM")
		}

		cand := resp.Candidates[0]
		// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
		fcalls := cand.FunctionCalls()
		// –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Ñ–∏–Ω–∞–ª)
		var textParts []string
		if cand.Content != nil {
			for _, p := range cand.Content.Parts {
				if t, ok := p.(genai.Text); ok && strings.TrimSpace(string(t)) != "" {
					textParts = append(textParts, string(t))
				}
			}
		}

		if len(fcalls) == 0 {
			// —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
			lastTextAnswer = strings.Join(textParts, "\n")
			if strings.TrimSpace(lastTextAnswer) == "" {
				lastTextAnswer = "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
			}
			log.Println("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
			return lastTextAnswer, nil
		}

		for _, fc := range fcalls {
			args := fc.Args
			if args == nil {
				args = map[string]any{}
			}
			result, err := c.callMCPTool(ctx, fc.Name, args)
			if err != nil {
				// –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ error-–ø–æ–ª–µ
				result = map[string]any{"error": err.Error()}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º tool-–æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–æ–ª—å—é
			toolContent := &genai.Content{
				Role:  "tool", // —Ä–æ–ª—å –¥–ª—è function response
				Parts: []genai.Part{genai.FunctionResponse{Name: fc.Name, Response: result}},
			}
			c.chat.History = append(c.chat.History, toolContent)
		}
	}

	return "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", nil
}

func envOr(k, def string) string {
	if v := strings.TrimSpace(os.Getenv(k)); v != "" {
		return v
	}
	return def
}

func flattenEnv(m map[string]string) []string {
	if len(m) == 0 {
		return nil
	}
	out := make([]string, 0, len(m))
	for k, v := range m {
		out = append(out, fmt.Sprintf("%s=%s", k, v))
	}
	return out
}

func main() {

	userQuery := strings.TrimSpace(strings.Join(os.Args[1:], " "))
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å: ")
	reader := bufio.NewReader(os.Stdin)
	line, _ := reader.ReadString('\n')
	userQuery = strings.TrimSpace(line)

	// –ö–æ–Ω—Ñ–∏–≥ (–∞–Ω–∞–ª–æ–≥ Python)
	cfg := defaultConfig()
	cfg.ServerURL = "http://localhost:8000/mcp"
	cfg.HTTPHeaders = nil

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Minute)
	defer cancel()

	client := NewMCPClient(cfg)
	if err := client.Start(ctx); err != nil {
		log.Fatalf("–°—Ç–∞—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
	}
	defer client.Stop()

	answer, err := client.ProcessQuery(ctx, userQuery, 10)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞: %v", err)
	}

	fmt.Println()
	fmt.Println(strings.Repeat("=", 80))
	fmt.Println("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–í–ï–¢:")
	fmt.Println(strings.Repeat("=", 80))
	fmt.Println(answer)
	fmt.Println(strings.Repeat("=", 80))
}
